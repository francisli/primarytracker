#!/usr/bin/env node

const AnyChart = require('anychart');
const AnyChartExport = require('anychart-nodejs');
const csv = require('csv-parser');
const fetch = require('node-fetch');
const fs = require('fs');
const https = require('https');
const inflection = require('inflection');
const JSDOM = require('jsdom').JSDOM;
const _ = require('lodash');
const mkdirp = require('mkdirp');
const path = require('path');
const Writable = require('stream').Writable

require('dotenv').config({path: path.resolve(__dirname, '../.env')});

const models = require('../models');
const helpers = require('../routes/helpers');

function extract() {
  console.log('Loading latest raw data...');
  let started = false;
  const writable = new Writable({
    objectMode: true,
    write: function(data, encoding, done) {
      started = true;
      data.state = data.state == '' ? null : data.state;
      data.pollster_rating_id = data.pollster_rating_id == '' ? null : data.pollster_rating_id;
      data.start_date = new Date(data.start_date);
      data.end_date = new Date(data.end_date);
      data.created_at = new Date(data.created_at);
      process.stdout.write('.');
      models.RawResult.upsert(data)
        .catch(function(error) {
          done(error);
        })
        .then(function() {
          done();
        });
    }
  });
  fs.createReadStream(path.resolve(__dirname, '../tmp/data.csv'))
    .pipe(csv())
    .pipe(writable)
    .on('error', function(error) {
      console.log('!!!', error);
      process.exit(1);
    })
    .on('finish', function() {
      if (started) {
        console.log('');
        transform().then(async function() {
          await helpers.purgeCache();
          console.log('Done!');
          process.exit();
        });
      }
    });
}

async function transform() {
  console.log('Updating pollster ratings...');
  await models.sequelize.query('SELECT DISTINCT pollster_rating_id,pollster_rating_name,fte_grade FROM raw_results')
    .then(async function([rows, metadata]) {
      for (let row of rows) {
        if (row.pollster_rating_id) {
          row.id = row.pollster_rating_id;
          delete row.pollster_rating_id;
          await models.PollsterRating.upsert(row);
        }
      }
    });

  console.log('Updating pollsters...');
  await models.sequelize.query('SELECT DISTINCT pollster_id,pollster,display_name,pollster_rating_id FROM raw_results')
    .then(async function([rows, metadata]) {
      for (let row of rows) {
        row.id = row.pollster_id;
        delete row.pollster_id;
        await models.Pollster.upsert(row);
      }
    });

  console.log('Updating sponsors...');
  await models.sequelize.query('SELECT DISTINCT sponsor_ids,sponsors FROM raw_results')
    .then(async function([rows, metadata]) {
      for (let row of rows) {
        if (row.sponsor_ids) {
          let sponsorIds = row.sponsor_ids.split(',');
          let sponsors = row.sponsors.split('|').map(function(s) { return s.trim() });
          for (let i = 0; i < sponsorIds.length; i++) {
            await models.Sponsor.upsert({
              id: sponsorIds[i],
              sponsor: sponsors[i]
            });
          }
        }
      }
    });

  console.log('Updating states...');
  await models.sequelize.query('SELECT DISTINCT state FROM raw_results')
    .then(async function([rows, metadata]) {
      for (let row of rows) {
        if (row.state) {
          await models.State.upsert(row);
        }
      }
    });

  console.log('Updating polls...');
  await models.sequelize.query('SELECT DISTINCT question_id,poll_id,cycle,state,pollster_id,sample_size,population,population_full,methodology,office_type,start_date,end_date,sponsor_candidate,internal,partisan,tracking,nationwide_batch,created_at,notes,url,stage,party FROM raw_results')
    .then(async function([rows, metadata]) {
      for (let row of rows) {
        row.updated_at = new Date();
        await models.Poll.upsert(row);
      }
    });

  console.log('Updating poll sponsors...');
  await models.sequelize.query('SELECT DISTINCT question_id,poll_id,sponsor_ids FROM raw_results')
    .then(async function([rows, metadata]) {
      for (let row of rows) {
        if (row.sponsor_ids) {
          const poll = await models.Poll.findOne({
            where: {
              question_id: row.question_id,
              poll_id: row.poll_id
            },
            attributes: ['id']
          });
          let sponsorIds = row.sponsor_ids.split(',');
          for (let sponsorId of sponsorIds) {
            await models.sequelize.query('INSERT INTO polls_sponsors (poll_id, sponsor_id) VALUES ($1, $2) ON CONFLICT (poll_id, sponsor_id) DO NOTHING', {bind: [poll.id, sponsorId]});
          }
        }
      }
    });

  const answerComparator = function(a, b) {
    if (a.pct < b.pct) {
      return 1;
    }
    if (a.pct > b.pct) {
      return -1;
    }
    if (a.answer < b.answer) {
      return -1;
    }
    if (a.answer > b.answer) {
      return 1;
    }
    return 0;
  };

  console.log('Updating poll results...');
  await models.Poll.findAll().then(async function(polls) {
    for (let poll of polls) {
      const [rows, metadata] = await models.sequelize.query('SELECT answer, candidate_name, pct FROM raw_results WHERE poll_id=$1 AND question_id=$2', {bind: [poll.poll_id, poll.question_id]})
      rows.sort(answerComparator);
      for (let i = 0; i < rows.length; i++) {
        if (i == 0) {
          rows[i].ranking = 1;
        } else if (rows[i].pct == rows[i-1].pct) {
          rows[i].ranking = rows[i-1].ranking;
        } else {
          rows[i].ranking = rows[i-1].ranking + 1;
        }
      }
      await poll.update({answers: rows, answers_length: rows.length});
    }
  });

  const calculateAverages = async function(polls) {
    let length = polls.length;
    for (let i = 0; i < length; i++) {
      let poll = polls[i];
      let averages = _.cloneDeep(poll.answers);
      for (let average of averages) {
        let count = 1;
        let j = i + 1;
        while (j < length && count < 5) {
          let answer = _.find(polls[j].answers, {candidate_name: average.candidate_name});
          if (answer) {
            average.pct += answer.pct;
            count += 1;
          }
          j += 1;
        }
        average.pct /= count;
      }
      averages.sort(answerComparator);
      await poll.update({averages: averages, averages_length: averages.length});
    }
  }

  console.log('Updating running averages national polls...');
  await models.Poll.findAll({
    where: { state: null, party: 'DEM', answers_length: { [models.Sequelize.Op.gt]: 2 } },
    order: [['end_date', 'DESC'], ['created_at', 'DESC'], ['start_date', 'DESC'], ['poll_id', 'DESC'], ['question_id', 'DESC']],
  }).then(async function(polls) {
    await calculateAverages(polls);
  });

  console.log('Updating running averages for states...');
  await models.State.findAll().then(async function(states) {
    for (let state of states) {
      const polls = await models.Poll.findAll({
        where: { state: state.state, party: 'DEM', answers_length: { [models.Sequelize.Op.gt]: 2 } },
        order: [['end_date', 'DESC'], ['created_at', 'DESC'], ['start_date', 'DESC'], ['poll_id', 'DESC'], ['question_id', 'DESC']],
      });
      await calculateAverages(polls);
    }
  });

  const generateSparkline = function(state, candidate, data) {
    const jsdom = new JSDOM('<body><div id="container"></div></body>', {runScripts: 'dangerously'});
    const window = jsdom.window;
    const anychart = AnyChart(window);
    const anychartExport = AnyChartExport(anychart);

    const chart = anychart.sparkline(data);
    chart.bounds(0, 0, 240, 60);
    chart.container('container');
    chart.stroke('black');
    chart.background().fill("#00000000");
    chart.draw();

    const promise = new Promise(function(resolve, reject) {
      const dir = path.resolve(__dirname, '../public/images/sparklines', inflection.dasherize(state.toLowerCase()));
      mkdirp.sync(dir);
      anychartExport.exportTo(chart, 'svg')
        .catch(function(error) {
          reject(error);
        })
        .then(function(image) {
          const filename = inflection.dasherize(candidate.replace(/[.']/g, '').toLowerCase());
          fs.writeFile(path.resolve(dir, `${filename}.svg`), image, function(error) {
            if (error) {
              reject(error);
            } else {
              resolve();
            }
          });
        });
    });
    return promise;
  }

  console.log('Generating sparkline charts for the national running average...');
  await models.Poll.findAll({
    where: { state: null, party: 'DEM', answers_length: { [models.Sequelize.Op.gt]: 2 } },
    order: [['end_date', 'ASC'], ['created_at', 'ASC'], ['start_date', 'ASC'], ['poll_id', 'ASC'], ['question_id', 'ASC']],
  }).then(async function(polls) {
    const data = {};
    for (let poll of polls) {
      for (let average of poll.averages) {
        data[average.candidate_name] = data[average.candidate_name] || [];
        data[average.candidate_name].push(average.pct);
      }
    }
    for (let candidate in data) {
      await generateSparkline('national', candidate, data[candidate]);
    }
  });

  console.log('Generating sparkline charts for the states...');
  await models.State.findAll().then(async function(states) {
    for (let state of states) {
      console.log('    ' + state.state);
      const polls = await models.Poll.findAll({
        where: { state: state.state, party: 'DEM', answers_length: { [models.Sequelize.Op.gt]: 2 } },
        order: [['end_date', 'ASC'], ['created_at', 'ASC'], ['start_date', 'ASC'], ['poll_id', 'ASC'], ['question_id', 'ASC']],
      });
      const data = {};
      for (let poll of polls) {
        for (let average of poll.averages) {
          data[average.candidate_name] = data[average.candidate_name] || [];
          data[average.candidate_name].push(average.pct);
        }
      }
      for (let candidate in data) {
        await generateSparkline(state.state, candidate, data[candidate]);
      }
    }
  });
}

// extract();

// transform().then(function() {
//   console.log('Done!');
//   process.exit();
// });

console.log('Downloading latest csv...');
const file = fs.createWriteStream(path.resolve(__dirname, '../tmp/data.csv'));
const request = https.get('https://projects.fivethirtyeight.com/polls-page/president_primary_polls.csv', function(response) {
  response.on('end', function() {
    extract();
  });
  response.pipe(file);
});

console.log('Fetching latest results...');
fetch('https://apps.npr.org/elections20-primaries/data/delegates.json')
  .then(res => res.json())
  .then(async data => {
    for (let row of data.state.parties.Dem.states) {
      const state = await models.State.findOne({where: {abbrev: row.state}});
      if (state) {
        let sum = 0;
        let delegates = [];
        for (let candidate of row.candidates) {
          if (candidate.total > 0) {
            sum += candidate.total;
            delegates.push({
              candidate: candidate.name,
              count: candidate.total
            });
          }
        }
        if (sum > 0) {
          delegates.sort((a, b) => b.count - a.count);
          if (sum < state.pledged_delegates) {
            delegates.splice(0, 0, {
              candidate: 'Pending',
              count: state.pledged_delegates - sum
            });
          }
          await state.update({delegates})
        }
      }
    }
  });
